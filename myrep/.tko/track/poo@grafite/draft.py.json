{
    "patches": [
        {
            "label": "2025-10-28_02-15-09",
            "content": "@@ -1,2589 +0,0 @@\n-class Grafite:%0A    def __init__(self, calibre :float, dureza : str, tamanho : int ):%0A        self.__calibre  = calibre%0A        self.__dureza = dureza%0A        self.__tamanho = tamanho%0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def get_dureza(self):%0A        return self.__dureza%0A%0A    def get_tamanho(self):%0A        return self.__tamanho%0A%0A    def set_tamanho(self, valor : int):%0A        self.__tamanho = valor%0A%0A    def gasto_por_folha(self):%0A        gastos = %7B%0A            %22HB%22 : 1,%0A            %222B%22 : 2,%0A            %224B%22 : 4,%0A            %226B%22 : 6%0A        %7D%0A%0A        return gastos.get(self.__dureza, 0)%0A%0A    def __str__(self):%0A        return f%22%7Bself.__calibre:.1f%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0Aclass Lapiseira:%0A    def __init__(self,calibre: float):%0A        self.__calibre = calibre%0A        self.__grafite = None   %0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def get_grafite(self):%0A        return self.__grafite is not None%0A%0A    def inserir(self, grafite : Grafite):%0A        if grafite.get_calibre() != self.__calibre:%0A            print(%22fail: calibre incompativel%22)   %0A            return%0A        if self.tem_grafite():%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        self.__grafite = grafite%0A%0A    def remover(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return None%0A        grafite_removido = self.__grafite%0A        self.__grafite = None%0A        return grafite_removido%0A%0A    def escrever(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return%0A%0A        grafite = self.__grafite%0A        tamanho = grafite.get_tamanho()%0A%0A        if tamanho %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        gasto = grafite.gasto_por_folha()%0A        tamanho_final = tamanho - gasto%0A%0A        if tamanho_final %3C 10:%0A            grafite.set_tamanho(10)%0A            print(%22fail: folha incompleta%22)%0A            return%0A%0A        grafite.set_tamanho(tamanho_final)%0A%0A    def __str__():%0A        if self.tem_grafite():%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: %5B%7Bself.__grafite%7D%5D%22%0A        else:%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: null%22%0A%0A%0Adef main():%0A    lapiseira = None%0A%0A    while True:%0A        line = input()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split()%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22show%22%0A         if lapiseira is None:%0A            print(%22fail: lapiseira nao iniciada%22)%0A        else:%0A            print(lapiseira)\n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_13-06-20",
            "content": "@@ -2458,17 +2458,16 @@\n = %22show%22\n-:\n %0A       \n",
            "lines": "104"
        },
        {
            "label": "2025-10-28_13-06-28",
            "content": "@@ -2587,520 +2587,4 @@\n ira)\n-%0A%0A        elif args%5B0%5D == %22init%22:%0A            calibre = float(argsk%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A%0A        elif args%5B0%5D == %22insert%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A%0A            calibre = float(args%5B1%5D)%0A            dureza = args%5B2%5D%0A            tamanho = int(args%7B3%7D)%0A            grafite = Grafite(calibre,dureza, tamanho)%0A            lapiseira.inserir(grafite)%0A%0A        elif args%5B0%5D == %22%22:%0A%0A        elif args%5B0%5D == %22%22:\n",
            "lines": "104"
        },
        {
            "label": "2025-10-28_13-09-52",
            "content": "@@ -3103,12 +3103,4 @@\n  %22%22:\n-%0A%0Amain()\n",
            "lines": "123"
        },
        {
            "label": "2025-10-28_13-10-04",
            "content": "@@ -2461,35 +2461,32 @@\n show%22:%0A         \n-   \n if lapiseira is \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-10-18",
            "content": "@@ -2644,32 +2644,33 @@\n bre = float(args\n+k\n %5B1%5D)%0A           \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-11-04",
            "content": "@@ -2773,32 +2773,36 @@\n ne:%0A            \n+    \n print(%22fail: lap\n@@ -3074,101 +3074,10 @@\n == %22\n-remove%22:%0A            if lapiseira is None:%0A            print(%22fail: lapiseira nao iniciada%22)%0A\n+%22:\n %0A%0A  \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-12-54",
            "content": "@@ -2498,36 +2498,32 @@\n ne:%0A            \n-    \n print(%22fail: lap\n@@ -2548,38 +2548,30 @@\n a%22)%0A        \n-    \n else:%0A\n-    \n             \n@@ -2761,36 +2761,32 @@\n iseira is None:%0A\n-    \n             prin\n@@ -3101,36 +3101,32 @@\n iseira is None:%0A\n-    \n             prin\n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_13-13-12",
            "content": "@@ -2961,11 +2961,11 @@\n args\n-%5B3%5D\n+%7B3%7D\n )%0A  \n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_13-13-29",
            "content": "@@ -3183,303 +3183,37 @@\n a%22)%0A\n-                continue%0A            lapiseira.remover()%0A%0A        elif args%5B0%5D == %22write%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A            lapiseira.escrever()%0A%0A        else:%0A            print(%22fail: comando invalido%22)\n+%0A%0A        elif args%5B0%5D == %22%22:\n %0A%0Ama\n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_13-15-36",
            "content": "@@ -1,3493 +1,68 @@\n-class Grafite:%0A    def __init__(self, calibre :float, dureza : str, tamanho : int ):%0A        self.__calibre  = calibre%0A        self.__dureza = dureza%0A        self.__tamanho = tamanho%0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def get_dureza(self):%0A        return self.__dureza%0A%0A    def get_tamanho(self):%0A        return self.__tamanho%0A%0A    def set_tamanho(self, valor : int):%0A        self.__tamanho = valor%0A%0A    def gasto_por_folha(self):%0A        gastos = %7B%0A            %22HB%22 : 1,%0A            %222B%22 : 2,%0A            %224B%22 : 4,%0A            %226B%22 : 6%0A        %7D%0A%0A        return gastos.get(self.__dureza, 0)%0A%0A    def __str__(self):%0A        return f%22%7Bself.__calibre:.1f%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0Aclass Lapiseira:%0A    def __init__(self,calibre: float):%0A        self.__calibre = calibre%0A        self.__grafite = None   %0A%0A    def get_calibre(self):%0A        return self.__calibre%0A%0A    def get_grafite(self):%0A        return self.__grafite is not None%0A%0A    def inserir(self, grafite : Grafite):%0A        if grafite.get_calibre() != self.__calibre:%0A            print(%22fail: calibre incompativel%22)   %0A            return%0A        if self.tem_grafite():%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        self.__grafite = grafite%0A%0A    def remover(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return None%0A        grafite_removido = self.__grafite%0A        self.__grafite = None%0A        return grafite_removido%0A%0A    def escrever(self):%0A        if not self.tem_grafite():%0A            print(%22fail: nao existe grafite%22)%0A            return%0A%0A        grafite = self.__grafite%0A        tamanho = grafite.get_tamanho()%0A%0A        if tamanho %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        gasto = grafite.gasto_por_folha()%0A        tamanho_final = tamanho - gasto%0A%0A        if tamanho_final %3C 10:%0A            grafite.set_tamanho(10)%0A            print(%22fail: folha incompleta%22)%0A            return%0A%0A        grafite.set_tamanho(tamanho_final)%0A%0A    def __str__(self):%0A        if self.tem_grafite():%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: %5B%7Bself.__grafite%7D%5D%22%0A        else:%0A            return f%22calibre: %7Bself.__calibre:.1f%7D, grafite: null%22%0A%0A%0Adef main():%0A    lapiseira = None%0A%0A    while True:%0A        line = input()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split()%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22show%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A            else:%0A                print(lapiseira)%0A%0A        elif args%5B0%5D == %22init%22:%0A            calibre = float(args%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A%0A        elif args%5B0%5D == %22insert%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A%0A            calibre = float(args%5B1%5D)%0A            dureza = args%5B2%5D%0A            tamanho = int(args%5B3%5D)%0A            grafite = Grafite(calibre,dureza, tamanho)%0A            lapiseira.inserir(grafite)%0A%0A        elif args%5B0%5D == %22remove%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A            lapiseira.remover()%0A%0A        elif args%5B0%5D == %22write%22:%0A            if lapiseira is None:%0A                print(%22fail: lapiseira nao iniciada%22)%0A                continue%0A            lapiseira.escrever()%0A%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0Amain()\n+@@ -2046,36 +2046,32 @@%0A     def __str__(%0A-self%0A ):%250A        if se%0A\n",
            "lines": "4"
        },
        {
            "label": "2025-10-28_13-20-19",
            "content": "@@ -899,19 +899,19 @@\n     def \n-tem\n+get\n _grafite\n@@ -2436,121 +2436,8 @@\n ak%0A%0A\n-        elif args%5B0%5D == %22init%22:%0A            calibre = float(args%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A%0A\n     \n@@ -2604,16 +2604,129 @@\n seira)%0A%0A\n+        elif args%5B0%5D == %22init%22:%0A            calibre = float(args%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A%0A\n         \n",
            "lines": "136"
        },
        {
            "label": "2025-10-28_13-21-41",
            "content": "class Grafite:\n    def __init__(self, calibre :float, dureza : str, tamanho : int ):\n        self.__calibre  = calibre\n        self.__dureza = dureza\n        self.__tamanho = tamanho\n\n    def get_calibre(self):\n        return self.__calibre\n\n    def get_dureza(self):\n        return self.__dureza\n\n    def get_tamanho(self):\n        return self.__tamanho\n\n    def set_tamanho(self, valor : int):\n        self.__tamanho = valor\n\n    def gasto_por_folha(self):\n        gastos = {\n            \"HB\" : 1,\n            \"2B\" : 2,\n            \"4B\" : 4,\n            \"6B\" : 6\n        }\n\n        return gastos.get(self.__dureza, 0)\n\n    def __str__(self):\n        return f\"{self.__calibre:.1f}:{self.__dureza}:{self.__tamanho}\"\n\nclass Lapiseira:\n    def __init__(self,calibre: float):\n        self.__calibre = calibre\n        self.__grafite = None   \n\n    def get_calibre(self):\n        return self.__calibre\n\n    def tem_grafite(self):\n        return self.__grafite is not None\n\n    def inserir(self, grafite : Grafite):\n        if grafite.get_calibre() != self.__calibre:\n            print(\"fail: calibre incompativel\")   \n            return\n        if self.tem_grafite():\n            print(\"fail: ja existe grafite\")\n            return\n        self.__grafite = grafite\n\n    def remover(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return None\n        grafite_removido = self.__grafite\n        self.__grafite = None\n        return grafite_removido\n\n    def escrever(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return\n\n        grafite = self.__grafite\n        tamanho = grafite.get_tamanho()\n\n        if tamanho <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = grafite.gasto_por_folha()\n        tamanho_final = tamanho - gasto\n\n        if tamanho_final < 10:\n            grafite.set_tamanho(10)\n            print(\"fail: folha incompleta\")\n            return\n\n        grafite.set_tamanho(tamanho_final)\n\n    def __str__(self):\n        if self.tem_grafite():\n            return f\"calibre: {self.__calibre:.1f}, grafite: [{self.__grafite}]\"\n        else:\n            return f\"calibre: {self.__calibre:.1f}, grafite: null\"\n\n\ndef main():\n    lapiseira = None\n\n    while True:\n        line = input()\n        print(f\"${line}\")\n        args = line.split()\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"init\":\n            calibre = float(args[1])\n            lapiseira = Lapiseira(calibre)\n\n        elif args[0] == \"show\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n            else:\n                print(lapiseira)\n\n        elif args[0] == \"insert\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n\n            calibre = float(args[1])\n            dureza = args[2]\n            tamanho = int(args[3])\n            grafite = Grafite(calibre,dureza, tamanho)\n            lapiseira.inserir(grafite)\n\n        elif args[0] == \"remove\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.remover()\n\n        elif args[0] == \"write\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.escrever()\n\n        else:\n            print(\"fail: comando invalido\")\n\nmain()",
            "lines": "136"
        }
    ]
}